extends c
priority 1

global !p
import vim
from snippet_module_base import *
from snippet_module_doxygen import *

def make_constructor_doc(class_name, padding, constructor_name):
	return get_doc_block_start() + \
		" " + constructor_name + " constructor of " + class_name + "." + \
		get_doc_empty_line(padding) + "\n" + \
		padding + get_doc_prefix() + "@param other " + class_name + \
		" from which this object should be created." + \
		get_doc_last_line(padding)

def make_assignment_doc(class_name, padding, constructor_name, constructor_action):
	return "\n" + padding + get_doc_block_start() + \
		" " + constructor_name + " assignment operator of " + class_name + "." + \
		get_doc_empty_line(padding) + "\n" + \
		padding + get_doc_prefix() + "@param other " + class_name + " to be " + \
		constructor_action + " into this object." + get_doc_last_line(padding)

def get_padding():
	line_nr = int(vim.eval("line('.')")) - 1
	return re.search("^(\s*)", vim.current.buffer[line_nr]).groups()[0]

# Generate code for the C++ big five.
def make_big_five(class_name, add_implementation, add_documentation, out_of_class):
	padding = get_padding()

	suffix = ""
	identifier = class_name
	dtor_name = "~" + class_name
	operator_name = "operator"
	if out_of_class:
		suffix = "::" + class_name
		identifier += suffix
		dtor_name = class_name + "::~" + class_name
		operator_name = class_name + "::operator"

	if add_documentation:
		move_ctor_doc = "\n" + padding + make_constructor_doc(class_name, padding, "Move") + "\n"
		copy_assgn_doc = "\n" + make_assignment_doc(class_name, padding, "Copy", "copied")
		move_assgn_doc = make_assignment_doc(class_name, padding, "Move", "moved") + "\n"
		dtor_doc = "\n" + padding + get_doc_block_start() + \
			" Destructor of " + class_name + "." + get_doc_commend_ending() + "\n"
		swap_doc = "\n" + padding + get_doc_block_start() + \
			" Swap function specialisation for " + class_name + " objects." + \
			get_doc_empty_line(padding) + "\n" + \
			padding + get_doc_prefix() + "@param first " + \
			"To be swapped with the second object." + "\n" + \
			padding + get_doc_prefix() + "@param second " + \
			"To be swapped with the first object." + \
			get_doc_last_line(padding) + "\n"
	else:
		move_ctor_doc = ""
		copy_assgn_doc = ""
		move_assgn_doc = ""
		dtor_doc = ""
		swap_doc = "\n"

	if add_implementation:
		copy_ctor_body = " {}"
		move_ctor_body = " {}"
		copy_assgn_body = " {}"
		move_assgn_body = " {}"
		dtor_body = " {}"
		swap_prefix = ""
		swap_body = "\n" + padding + "{\n" + padding + "  using std::swap;\n" + \
			padding + "}"
	else:
		copy_ctor_body = ";"
		move_ctor_body = ";"
		copy_assgn_body = ";"
		move_assgn_body = ";"
		dtor_body = ";"
		swap_prefix = "friend "
		swap_body = ";"

	return suffix + "(const " + class_name + " &other)" + copy_ctor_body + "\n" + \
		move_ctor_doc + \
		padding + identifier +"(" + class_name + " &&other) noexcept" + \
		move_ctor_body + copy_assgn_doc + "\n" + \
		padding + class_name +" &" + operator_name + "=(const " + class_name + " &other)" + \
		copy_assgn_body + "\n" + move_assgn_doc + \
		padding + class_name +" &" + operator_name + "=(" + class_name + " &&other) noexcept" + \
		move_assgn_body + "\n" + dtor_doc + \
		padding + dtor_name + "()" + dtor_body + "\n" + swap_doc + \
		padding + swap_prefix + "void swap(" + class_name +" &first, " + class_name +" &second)" + \
		swap_body
endglobal

snippet cout "Expands to a print statement"
std::cout << "${1}" << std::endl;
endsnippet
snippet cerr "Expands to a print statement"
std::cerr << "${1}" << std::endl;
endsnippet

snippet inc "C++ include placeholder" b
#include <${1}>
endsnippet
snippet inq "C++ include placeholder" b
#include "${1}.hpp"
endsnippet

snippet ns "Expands to a namespace" b
namespace ${1:`!p
snip.rv = get_pascal_case(snip.basename)
`}
{
	${0}
}
endsnippet
snippet enum "Expands to an enum class" b
enum class ${1:`!p snip.rv = get_pascal_case(snip.basename)`}
{
	${0}
};
endsnippet
snippet up "std::unique_ptr<...>" w
std::unique_ptr<${1}>
endsnippet
snippet mu "std::make_unique<...>" w
std::make_unique<${1}>
endsnippet
snippet sp "std::shared_ptr<...>" w
std::shared_ptr<${1}>
endsnippet
snippet ms "std::make_shared<...>" w
std::make_shared<${1}>
endsnippet
snippet errno "Expands to throwing an errno message" b
throw std::system_error(errno, std::system_category(), ${1:message});
endsnippet
snippet runtime "Expands to throwing an runtime error" b
throw std::runtime_error(${1:message});
endsnippet

snippet class "Expands to a class skeleton" b
class ${1:`!p
snip.rv = get_pascal_case(snip.basename)
`}
{
	${0}
};
endsnippet
snippet bigfive "Expands to the in-class implementation of the big five" b
`!p snip.rv = make_constructor_doc(t[1], get_padding(), "Copy")`
${1:`!p snip.rv = get_pascal_case(snip.basename)`}`!p
snip.rv = make_big_five(t[1], True, True, False)`
endsnippet
snippet dbigfive "Expands to the declaration of the big five" b
${1:`!p snip.rv = get_pascal_case(snip.basename)`}`!p
snip.rv = make_big_five(t[1], False, False, False)`
endsnippet
snippet ibigfive "Expands to the out-of-class implementation of the big five" b
`!p snip.rv = make_constructor_doc(t[1], get_padding(), "Copy")`
${1:`!p snip.rv = get_pascal_case(snip.basename)`}`!p
snip.rv = make_big_five(t[1], True, True, True)`
endsnippet

snippet fore "for each loop skeleton" b
for(const auto &${1}: ${2})
{
	${0}
}
endsnippet
